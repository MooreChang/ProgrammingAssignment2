## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<-NULL
}
get <- function() x
setInverse <- function(Inverse) inv <<-Inverse
getInverse <- function() inv
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <-X$get()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <-solve(data, ...)
x$setInverse(inv)
## Return a matrix that is the inverse of 'x'
return(inv)
}
My_mat <- matrix(1:4, 2,2)
makecachematrix(my_mat)
makeCacheMatrix(my_mat)
My_mat <- makeCacheMatrix(matrix(1:4, 2,2))
My_mat <- makeCacheMatrix(matrix(1:4, 2,2))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<-NULL
}
get <- function() x
setInverse <- function(Inverse) inv <<-Inverse
getInverse <- function() inv
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <-X$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <-solve(data, ...) ## solve inverse Matrix
x$setInverse(inv)
## Return a matrix that is the inverse of 'x'
return(inv)
}
My_mat <- makeCacheMatrix(matrix(1:4, 2,2))
My_mat$get()
My_mat$getInverse()
My_mat$set()
cacheSolve(My_mat)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<-NULL
}
get <- function() x
setInverse <- function(Inverse) inv <<-Inverse
getInverse <- function() inv
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <-X$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <-solve(data, ...) ## solve inverse Matrix
x$setInverse(inv)
## Return a matrix that is the inverse of 'x'
inv
}
My_mat <- makeCacheMatrix(matrix(1:4, 2,2))
My_mat$get()
My_mat$getInverse()
cacheSolve(My_mat)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<-NULL
}
get <- function() x
setInverse <- function(Inverse) inv <<-Inverse
getInverse <- function() inv
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <-X$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <-solve(data, ...) ## solve inverse Matrix
x$setInverse(inv)
## Return a matrix that is the inverse of 'x'
inv
}
